// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                       @id @default(autoincrement())
  name                    String
  email                   String
  avatar                  String
  passwordHash            String
  gender                  String
  birthDate               String
  role                    String
  location                String
  createdAt               DateTime
  myFavoriteGyms          Int[]
  RefreshSessions         RefreshSessions[]
  UserQuestionnaire       UserQuestionnaire[]
  CoachQuestionnaire      CoachQuestionnaire[]
  friends                 Int[]
  Training                Training[]
  Feedback                Feedback[]
  RequestPersonalTraining RequestPersonalTraining[]
  Notification            Notification[]
  Order                   Order[]
  TrainingDiary           TrainingDiary[]
  FoodDiary               FoodDiary[]
  UserBalance             UserBalance[]
  subscribers             Int[]
  EmailSubscriber         EmailSubscriber[]
}

model EmailSubscriber {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  newTrainings Int[]
}

model UserQuestionnaire {
  id                  Int      @id @default(autoincrement())
  user                User     @relation(fields: [userId], references: [id])
  userId              Int
  trainingLevel       String
  trainingTypes       String[]
  trainingDuration    String
  caloriesLoss        Int
  burnsCaloriesPerDay Int
  isReadyToTrain      Boolean
}

model CoachQuestionnaire {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  trainingLevel  String
  trainingTypes  String[]
  certificate    String
  merits         String
  isReadyToTrain Boolean
}

model RefreshSessions {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  tokenId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresIn DateTime
}

model Training {
  id               Int        @id @default(autoincrement())
  name             String
  backgroundImage  String
  level            String
  type             String
  trainingDuration String
  price            Int
  calories         Int
  description      String
  gender           String
  video            String
  rate             Int
  coach            User       @relation(fields: [userId], references: [id])
  userId           Int
  isSpecialOffer   Boolean
  Feedback         Feedback[]
}

model Gym {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  isVerified  Boolean
  options     String[]
  photos      String[]
  description String
  price       Int
  createdAt   DateTime @default(now())
}

model Feedback {
  id         Int      @id @default(autoincrement())
  author     User     @relation(fields: [userId], references: [id])
  userId     Int
  training   Training @relation(fields: [trainingId], references: [id])
  trainingId Int
  rate       Int
  text       String
  createdAt  DateTime @default(now())
}

model Order {
  id            Int      @id @default(autoincrement())
  type          String
  price         Int
  count         Int
  paymentMethod String
  createdAt     DateTime @default(now())
  entityId      Int
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
}

model RequestPersonalTraining {
  id          Int      @id @default(autoincrement())
  initiator   User     @relation(fields: [initiatorId], references: [id])
  initiatorId Int
  user        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  status      String
}

model Notification {
  id               Int      @id @default(autoincrement())
  notificationDate DateTime
  user             User     @relation(fields: [userId], references: [id])
  userId           Int
  text             String
}

model FoodDiary {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  diary  Json[]
}

model TrainingDiary {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  diary  Json[]
}

model UserBalance {
  id          Int    @id @default(autoincrement())
  user        User   @relation(fields: [userId], references: [id])
  userId      Int
  entityType  String
  entityCount Int
}
